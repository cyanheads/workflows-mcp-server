You are an intelligent Software Engineer who is an expert in TypeScript and the Model Context Protocol (MCP). Below is a cheatsheet for our current project, `workflows-mcp-server`.

# workflows-mcp-server Developer Cheatsheet

This server is designed to allow a Large Language Model (LLM) to retrieve and understand complex, multi-step workflows defined in YAML files. A key feature is the dynamic injection of **global instructions**, which provide high-level guidance to the LLM on how to execute the workflows.

## Core Concepts

-   **Workflow:** A predefined sequence of steps defined in a `.yaml` file located in the `workflows-yaml/` directory. Each step specifies an action to be performed by a tool on a designated MCP server.
-   **Global Instructions:** A centrally-managed set of directives (from a file like `global_instructions.md`) that are dynamically injected into every workflow definition upon request.

## Workflow YAML File Structure

Each workflow is defined in its own `.yaml` file. The structure is designed to be comprehensive, providing rich metadata for discovery and filtering, as well as a clear, ordered list of instructions for execution.

```yaml
# The user-friendly name of the workflow.
name: "Process and Archive New User Images"
# Semantic versioning for the workflow.
version: "1.2.0"
# A brief, clear description of what the workflow accomplishes.
description: "Resizes an input image, applies a standard watermark, and uploads it."
# The author or team responsible.
author: "Media Processing Team"
# The date the workflow was initially created.
created_date: "2025-06-10"
# The date the workflow was last modified.
last_updated_date: "2025-06-13"
# A broad category for grouping.
category: "Image Processing"
# A list of specific tags for filtering.
tags:
  - "resize"
  - "watermark"
  - "s3"
# The sequence of steps to be executed.
steps:
  - server: "image_processor_server_v2"
    tool: "image_magick_tool"
    action: "resize"
    params:
      input_file: "{{input.image_path}}"
      output_file: "resized_temp.jpg"
      width: 1024
      height: 1024
  - server: "cloud_services_server"
    tool: "s3_storage_tool"
    action: "upload"
    params:
      source_file: "final_watermarked.jpg"
      destination_bucket: "company-archival-bucket"
```

## Tool Specifications

### 1. `workflow_return_list`

-   **Description:** Retrieves a list of available workflows, providing key metadata for each. Allows for discovery and filtering.
-   **Input:**
    -   `category` (string, optional): Filter by category.
    -   `tags` (list of strings, optional): Filter by workflows containing all specified tags.
-   **Output:** A JSON array of workflow metadata objects.

### 2. `workflow_get_instructions`

-   **Description:** Retrieves the complete definition for a single workflow, including the dynamically injected global instructions.
-   **Input:**
    -   `name` (string, required): The exact name of the workflow.
    -   `version` (string, optional): The specific version (defaults to latest).
-   **Output:** The full JSON representation of the workflow, with the `instructions` field prepended.

---

## General MCP Server Cheatsheet (from Template)

This section contains the original, still-relevant information from the `mcp-ts-template`.

### Server Transports & Configuration

The server can run using different communication transports, configured via environment variables.

- **`MCP_TRANSPORT_TYPE`**: Specifies the transport.
  - `"stdio"` (Default): Uses standard input/output for communication. Suitable for direct integration with parent processes.
  - `"http"`: Uses Streamable HTTP for communication. Runs a Hono server.
- **`MCP_HTTP_PORT`**: Port for the HTTP server (Default: `3010`). Used only if `MCP_TRANSPORT_TYPE=http`.
- **`MCP_HTTP_HOST`**: Host address for the HTTP server (Default: `127.0.0.1`). Used only if `MCP_TRANSPORT_TYPE=http`.
- **`MCP_ALLOWED_ORIGINS`**: Comma-separated list of allowed origins for HTTP requests (e.g., `http://localhost:8080,https://my-frontend.com`). Used only if `MCP_TRANSPORT_TYPE=http`.
- **`MCP_LOG_LEVEL`**: Minimum logging level for the server (e.g., "debug", "info", "warning", "error", "notice", "crit", "alert", "emerg"). Defaults to "debug". Affects both file logging and MCP notifications.
- **`LOGS_DIR`**: Directory for log files. Defaults to "`logs/`" in the project root. Configured via `src/config/index.ts`.
- **`MCP_AUTH_SECRET_KEY`**: **Required for HTTP transport.** Secret key (min 32 chars) for signing/verifying auth tokens (JWT). Defaults to `undefined`. **MUST be set in production.**
- **LLM Provider Configuration**: Environment variables for configuring Large Language Model (LLM) providers, primarily OpenRouter.
  - **`OPENROUTER_API_KEY`**: API key for OpenRouter.
  - **`LLM_DEFAULT_MODEL`**: Default LLM model to use (e.g., `google/gemini-2.5-flash-preview-05-20`).
  - **`LLM_DEFAULT_TEMPERATURE`**: Default temperature for LLM responses.

### Running the Server

- **Format Code**: `npm run format`
- **Stdio**: `npm run start:stdio`
- **HTTP**: `npm run start:http` (optionally set `MCP_HTTP_PORT`, `MCP_HTTP_HOST`, `MCP_ALLOWED_ORIGINS`, `MCP_LOG_LEVEL`, `MCP_AUTH_SECRET_KEY`).

### SDK Usage (TypeScript) - IMPORTANT

- **High-Level SDK Abstractions (Strongly Recommended):**

  - **Use `server.tool(name, description, zodSchemaShape, handler)`:** This is the **preferred and strongly recommended** way to define tools. It automatically handles schema generation, validation, and routing.
  - **Use `server.resource(regName, templateOrUri, [metadataOrHandler], [handlerIfMetadataProvided])`:** Similarly recommended for resources.
  - **Benefits:** Reduces boilerplate, enforces type safety, simplifies protocol adherence.

- **Modular Capability Structure (Recommended Practice):**

  - For better organization, separate capability logic from its registration.
    - **Logic File (e.g., `myTool/logic.ts`):** Contains Zod schema definition and the core handler function.
    - **Registration File (e.g., `myTool/registration.ts`):** Imports logic and schema, registers the capability with the `McpServer` instance.
  - The main server file (`src/mcp-server/server.ts`) then imports and calls these registration functions.

### Security Considerations

- **Input Validation:** Use schemas (Zod), sanitize inputs (paths, HTML, SQL).
- **Access Control:** Least privilege, respect roots.
- **Transport Security:**
  - **HTTP:** Mandatory JWT authentication (`src/mcp-server/transports/authentication/authMiddleware.ts`). **Requires `MCP_AUTH_SECRET_KEY` to be set.** Validate `Origin` header.
  - **Stdio:** Authentication typically handled by the host process.
- **Secrets Management:** Use env vars (`MCP_AUTH_SECRET_KEY`) or secrets managers.

### Core Utilities Integration

Proper use of the utilities in `src/utils` is crucial for building robust and maintainable MCP servers.

- **Logging (`src/utils/internal/logger.ts`):** Use the singleton `logger` for structured, context-aware logging. Always pass a `RequestContext` object.
- **Error Handling (`src/types-global/errors.ts`, `src/utils/internal/errorHandler.ts`):** Throw `McpError` for specific errors. Use `ErrorHandler.tryCatch` to wrap operations for consistent error processing.
- **Request Context (`src/utils/internal/requestContext.ts`):** Use `requestContextService.createRequestContext` to generate and propagate context for tracing and logging.

### Adding New Features

**Recommended Modular Structure:**

- **Logic File (`yourCapabilityName/logic.ts`):** Define Zod schemas, core handler function.
- **Registration File (`yourCapabilityName/registration.ts`):** Import logic/schema, use `server.tool()` or `server.resource()` to register.
- **Index File (`yourCapabilityName/index.ts`):** Export the registration function.
- Your main server file (`src/mcp-server/server.ts`) then imports and calls these registration functions.

### Key File Locations

- **Main Entry**: `src/index.ts`
- **Server Setup**: `src/mcp-server/server.ts`
- **Configuration**: `src/config/index.ts`
- **Global Types**: `src/types-global/`
- **Utilities**: `src/utils/`
- **Tools**: `src/mcp-server/tools/`
- **Workflows**: `workflows-yaml/`
